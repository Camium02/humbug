Context: Implementation
    Include: metaphor/python-rules.m6r

    Context: Terminal
        Context: Custom widget
            For performance reasons the terminal emulator window is implemented with a custom widget.

        Context: Pre-allocated "active" display
            The terminal emulator pre-allocates the display buffer for the active terminal.  All terminal character cells
            are pre-allocated and writes to the terminal overwrite them.  As this is a terminal emulator the lines are a
            known fixed width (the width of the terminal) and we do not have to consider any characters beyond this as
            there will never be any characters beyond the end of the pre-allocated line.

            Both the primary and secondary displays use pre-allocation.  The primary display pre-allocation occurs when
            the terminal is started, while the secondary displays are pre-allocated as they are initiated.

    Context: Logging
        Where appropriate the application will log key operations, errors, and exceptions to a log file.  A new log file
        will be created at the start of each application run.

        The log file will be named "yyyy-mm-dd-hh-mm-ss-ttt.log", substituting the application start date and time (in UTC)
        for yyyy, mm, dd, hh, mm, ss, ttt (year, numeric month, day-of-month, hours, minutes, seconds, and thousandths of
        seconds respectively).

        The log file will be written to a "logs" directory of the ".humbug" directory in the user's home directory.  If this
        does not exist then the application should create it.

        The application will maintain the last 50 log files but delete any older ones.

        If any log file exceeds 1 MByte in size then it will be rotated.

    Context: GUI
        The GUI must be built using the latest version of PySide6, and with qasync to support the integration of this
        and async IO operations.

        Note that PySide6 correctly translates the keyboard shortcuts described into appropriate platform-specific
        shortcuts and no extra logic is required for these.

        Context: Platform support
            The GUI must work on MacOS X (any version since 2020), Linux (any version since 2020), and Microsoft
            Windows 10 or 11.

        Context: Asynchronous design
            The UI must be asynchronous to ensure the application can remain reactive.

        Context: Performance guidelines
            Context: Scrolling performance
                - 60 FPS target for scroll operations

    Context: Package dependencies
        Leverage standard library tools before custom solutions, unless specifically instructed.

        Context: Qt widgets
            Use the PySide6 widget library for the GUI

        Context: HTTP interations
            Use the aiohttp library for HTTP interactions (e.g. the REST API).

        Context: Certifi
            Use the certifi package to ensure we have the right root certs available for SSL.
