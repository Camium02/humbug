Context: Calculator Tool
    The calculator tool provides safe mathematical expression evaluation for AI assistants. It uses Abstract Syntax Tree (AST) parsing to securely evaluate mathematical expressions without executing arbitrary code.

    Context: Tool Definition
        The calculator tool is identified as "calculate" and provides mathematical computation capabilities through expression evaluation.

        Context: Purpose
            The tool enables AI assistants to:

            - Perform mathematical calculations and computations
            - Evaluate complex mathematical expressions safely
            - Support arithmetic, trigonometric, and logarithmic operations
            - Handle real and complex number mathematics
            - Provide accurate numerical results for problem-solving

        Context: Security Model
            The calculator implements multiple security layers:

            - Uses AST parsing instead of `eval()` to prevent code execution
            - Restricts operations to predefined safe mathematical functions
            - Limits recursion depth to prevent stack overflow attacks
            - Validates all inputs before processing
            - No access to system resources or user data

    Context: Mathematical Capabilities
        Context: Arithmetic Operations
            The calculator supports standard arithmetic operations:

            - Addition: `+` (e.g., `3 + 5`)
            - Subtraction: `-` (e.g., `10 - 3`)
            - Multiplication: `*` (e.g., `4 * 7`)
            - Division: `/` (e.g., `15 / 3`)
            - Floor Division: `//` (e.g., `17 // 5`)
            - Modulo: `%` (e.g., `17 % 5`)
            - Exponentiation: `**` (e.g., `2 ** 8`)

        Context: Mathematical Functions
            Context: Basic Functions
                - abs(x): Absolute value
                - round(x): Round to nearest integer (real numbers only)
                - min(a, b, ...): Minimum of arguments
                - max(a, b, ...): Maximum of arguments
                - pow(x, y): Power function (x raised to y)

            Context: Trigonometric Functions
                All trigonometric functions support complex numbers:

                - sin(x): Sine function
                - cos(x): Cosine function  
                - tan(x): Tangent function

            Context: Logarithmic and Exponential Functions
                - sqrt(x): Square root (supports complex results)
                - log(x): Natural logarithm
                - log10(x): Base-10 logarithm
                - exp(x): Exponential function (e^x)

            Context: Rounding Functions
                These functions work only with real numbers:

                - floor(x): Floor function (largest integer ≤ x)
                - ceil(x): Ceiling function (smallest integer ≥ x)

        Context: Mathematical Constants
            The calculator provides standard mathematical constants:

            - pi: Mathematical constant π (3.14159...)
            - e: Euler's number (2.71828...)
            - j: Imaginary unit (√-1)

        Context: Complex Number Support
            The calculator fully supports complex number arithmetic:

            - Complex numbers can be created using `j` (e.g., `3 + 4j`)
            - All arithmetic operations work with complex numbers
            - Results are simplified to real numbers when imaginary part is negligible
            - Tolerance for zero imaginary part: 1×10⁻¹⁰

    Context: Expression Syntax
        Context: Operator Precedence
            Expressions follow standard mathematical precedence:

            1. Parentheses `()`
            2. Exponentiation `**` (right-associative)
            3. Unary operators `+`, `-`
            4. Multiplication `*`, Division `/`, Floor Division `//`, Modulo `%`
            5. Addition `+`, Subtraction `-`

        Context: Parentheses and Grouping
            - Parentheses can be nested to any depth (up to recursion limit)
            - Use parentheses to override default precedence
            - Example: `(2 + 3) * (4 + 5)` evaluates to `45`

        Context: Function Calls
            Functions are called with standard syntax:

            - Function name followed by parentheses
            - Arguments separated by commas
            - Example: `pow(2, 3)` evaluates to `8`
            - Example: `min(1, 2, 3)` evaluates to `1`

    Context: Parameters
        Context: Expression Parameter
            The tool requires a single parameter:

            - Name: "expression"
            - Type: String
            - Required: Yes
            - Description: Mathematical expression to evaluate

            Context: Expression Validation
                The expression parameter must:

                - Be a non-empty string
                - Contain valid mathematical syntax
                - Use only supported operators and functions
                - Not exceed maximum recursion depth (100 levels)

    Context: Result Processing
        Context: Result Simplification
            The calculator automatically simplifies results:

            - Complex numbers with negligible imaginary parts become real
            - Real numbers that are whole numbers become integers
            - Maintains precision for fractional results
            - Handles overflow and underflow conditions

        Context: Output Format
            Results are returned as strings representing:

            - Integers for whole number results
            - Floating-point numbers for fractional results
            - Complex numbers in standard form (e.g., `(3+4j)`)

    Context: Error Handling
        Context: Expression Errors
            The calculator detects and reports various expression errors:

            - Syntax Errors: Invalid mathematical syntax
            - Undefined Variables: References to unknown variables/constants
            - Unsupported Operations: Use of prohibited functions or operators
            - Type Errors: Invalid argument types for functions

        Context: Mathematical Errors
            Mathematical error conditions are properly handled:

            - Division by Zero: Detected and reported clearly
            - Overflow: Results too large to represent
            - Domain Errors: Invalid function arguments (e.g., `sqrt(-1)` for real-only functions)

        Context: Security Errors
            Security-related errors prevent malicious use:

            - Deep Recursion: Expression nesting exceeds safety limits
            - Forbidden Operations: Attempts to use non-mathematical operations
            - Code Injection: Any attempt to execute non-mathematical code

        Context: Timeout Protection
            The calculator includes timeout protection:

            - Maximum execution time: 5 seconds
            - Prevents infinite loops and excessive computation
            - Raises `AIToolTimeoutError` if timeout exceeded
            - Uses `asyncio.wait_for` with thread execution

    Context: Usage Examples
        Context: Basic Arithmetic
            ```json
            {
                "tool": "calculate",
                "arguments": {
                    "expression": "2 + 3 * 4"
                }
            }
            ```

            Returns: `"14"`

        Context: Trigonometric Calculations
            ```json
            {
                "tool": "calculate", 
                "arguments": {
                    "expression": "sin(pi/2)"
                }
            }
            ```

            Returns: `"1.0"`

        Context: Complex Number Operations
            ```json
            {
                "tool": "calculate",
                "arguments": {
                    "expression": "(3 + 4j) * (1 - 2j)"
                }
            }
            ```

            Returns: `"(11-2j)"`

        Context: Logarithmic Functions
            ```json
            {
                "tool": "calculate",
                "arguments": {
                    "expression": "log10(1000)"
                }
            }
            ```

            Returns: `"3.0"`

        Context: Function Combinations
            ```json
            {
                "tool": "calculate",
                "arguments": {
                    "expression": "sqrt(pow(3, 2) + pow(4, 2))"
                }
            }
            ```

            Returns: `"5.0"`

    Context: Performance Characteristics
        Context: Execution Speed
            The calculator is optimized for performance:

            - AST parsing is efficient for typical expressions
            - No I/O operations during calculation
            - Minimal memory allocation for most operations
            - Timeout protection prevents runaway calculations

        Context: Memory Usage
            Memory usage is controlled and predictable:

            - AST nodes are lightweight
            - No persistent state between calculations
            - Automatic garbage collection of intermediate results
            - Recursion depth limits prevent stack overflow

        Context: Scalability
            The tool can handle frequent calculations:

            - No shared state between tool instances
            - Thread-safe execution model
            - Suitable for concurrent use
            - No cleanup required between calculations

    Context: Integration Considerations
        Context: Input Validation
            Applications should validate inputs before calling the calculator:

            - Check expression length for reasonable limits
            - Sanitize user input if needed
            - Handle empty or whitespace-only expressions
            - Provide clear error messages to users

        Context: Result Interpretation
            When processing calculator results:

            - Parse returned strings according to expected type
            - Handle both real and complex number results
            - Account for floating-point precision limitations
            - Validate results for expected ranges

        Context: Error Recovery
            Applications should implement appropriate error recovery:

            - Catch and handle `AIToolExecutionError` exceptions
            - Provide user-friendly error messages
            - Allow users to correct and retry expressions
            - Log errors for debugging purposes