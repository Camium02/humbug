........................................................................ [ 17%]
........................................................................ [ 35%]
........................................................................ [ 53%]
........................................................................ [ 71%]
.....................................................................FF. [ 88%]
........FEF...................................                           [100%]
==================================== ERRORS ====================================
_ ERROR at teardown of TestToolFileSystemWriteFile.test_write_file_permission_error _

self = PurePosixPath('pathlib/Path')

    @property
    def _tail(self):
        try:
>           return self._tail_cached
                   ^^^^^^^^^^^^^^^^^
E           AttributeError: 'pathlib._local.PurePosixPath' object has no attribute '_tail_cached'

/opt/homebrew/Cellar/python@3.13/3.13.5/Frameworks/Python.framework/Versions/3.13/lib/python3.13/pathlib/_local.py:310: AttributeError

During handling of the above exception, another exception occurred:

coro = <coroutine object to_thread at 0x103406a40>

    def _warn_unawaited_coroutine(coro):
        msg_lines = [
            f"coroutine '{coro.__qualname__}' was never awaited\n"
        ]
        if coro.cr_origin is not None:
            import linecache, traceback
            def extract():
                for filename, lineno, funcname in reversed(coro.cr_origin):
                    line = linecache.getline(filename, lineno)
                    yield (filename, lineno, funcname, line)
            msg_lines.append("Coroutine created at (most recent call last)\n")
            msg_lines += traceback.format_list(list(extract()))
        msg = "".join(msg_lines).rstrip("\n")
        # Passing source= here means that if the user happens to have tracemalloc
        # enabled and tracking where the coroutine was created, the warning will
        # contain that traceback. This does mean that if they have *both*
        # coroutine origin tracking *and* tracemalloc enabled, they'll get two
        # partially-redundant tracebacks. If we wanted to be clever we could
        # probably detect this case and avoid it, but for now we don't bother.
>       warn(msg, category=RuntimeWarning, stacklevel=2, source=coro)
E       RuntimeWarning: coroutine 'to_thread' was never awaited

/opt/homebrew/Cellar/python@3.13/3.13.5/Frameworks/Python.framework/Versions/3.13/lib/python3.13/warnings.py:692: RuntimeWarning

The above exception was the direct cause of the following exception:

cls = <class '_pytest.runner.CallInfo'>
func = <function call_and_report.<locals>.<lambda> at 0x103605e40>
when = 'teardown'
reraise = (<class '_pytest.outcomes.Exit'>, <class 'KeyboardInterrupt'>)

    @classmethod
    def from_call(
        cls,
        func: Callable[[], TResult],
        when: Literal["collect", "setup", "call", "teardown"],
        reraise: type[BaseException] | tuple[type[BaseException], ...] | None = None,
    ) -> CallInfo[TResult]:
        """Call func, wrapping the result in a CallInfo.
    
        :param func:
            The function to call. Called without arguments.
        :type func: Callable[[], _pytest.runner.TResult]
        :param when:
            The phase in which the function is called.
        :param reraise:
            Exception or exceptions that shall propagate if raised by the
            function, instead of being wrapped in the CallInfo.
        """
        excinfo = None
        instant = timing.Instant()
        try:
>           result: TResult | None = func()
                                     ^^^^^^

venv/lib/python3.13/site-packages/_pytest/runner.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.13/site-packages/_pytest/runner.py:246: in <lambda>
    lambda: runtest_hook(item=item, **kwds), when=when, reraise=reraise
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
venv/lib/python3.13/site-packages/pluggy/_hooks.py:512: in __call__
    return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
venv/lib/python3.13/site-packages/pluggy/_manager.py:120: in _hookexec
    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
venv/lib/python3.13/site-packages/_pytest/logging.py:858: in pytest_runtest_teardown
    yield
venv/lib/python3.13/site-packages/_pytest/capture.py:905: in pytest_runtest_teardown
    return (yield)
            ^^^^^
venv/lib/python3.13/site-packages/_pytest/unraisableexception.py:163: in pytest_runtest_teardown
    collect_unraisable(item.config)
venv/lib/python3.13/site-packages/_pytest/unraisableexception.py:79: in collect_unraisable
    raise errors[0]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

config = <_pytest.config.Config object at 0x101a578c0>

    def collect_unraisable(config: Config) -> None:
        pop_unraisable = config.stash[unraisable_exceptions].pop
        errors: list[pytest.PytestUnraisableExceptionWarning | RuntimeError] = []
        meta = None
        hook_error = None
        try:
            while True:
                try:
                    meta = pop_unraisable()
                except IndexError:
                    break
    
                if isinstance(meta, BaseException):
                    hook_error = RuntimeError("Failed to process unraisable exception")
                    hook_error.__cause__ = meta
                    errors.append(hook_error)
                    continue
    
                msg = meta.msg
                try:
>                   warnings.warn(pytest.PytestUnraisableExceptionWarning(msg))
E                   pytest.PytestUnraisableExceptionWarning: Exception ignored in: <coroutine object to_thread at 0x103406a40>
E                   Enable tracemalloc to get traceback where the object was allocated.
E                   See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.

venv/lib/python3.13/site-packages/_pytest/unraisableexception.py:67: PytestUnraisableExceptionWarning
------------------------------ Captured log call -------------------------------
ERROR    ToolFileSystem:tool_filesystem.py:321 Unexpected error in filesystem operation 'write_file': TestToolFileSystemWriteFile.test_write_file_permission_error.<locals>.mock_permission_error() takes 0 positional arguments but 5 were given
Traceback (most recent call last):
  File "/Users/dave/github/m6r/humbug/src/humbug/tools/tool_filesystem.py", line 312, in execute
    result = await handlers[operation](arguments, request_authorization)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/dave/github/m6r/humbug/src/humbug/tools/tool_filesystem.py", line 465, in _write_file
    await asyncio.wait_for(
    ...<2 lines>...
    )
  File "/opt/homebrew/Cellar/python@3.13/3.13.5/Frameworks/Python.framework/Versions/3.13/lib/python3.13/asyncio/tasks.py", line 507, in wait_for
    return await fut
           ^^^^^^^^^
  File "/opt/homebrew/Cellar/python@3.13/3.13.5/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py", line 2332, in _execute_mock_call
    result = await effect(*args, **kwargs)
                   ~~~~~~^^^^^^^^^^^^^^^^^
TypeError: TestToolFileSystemWriteFile.test_write_file_permission_error.<locals>.mock_permission_error() takes 0 positional arguments but 5 were given
=================================== FAILURES ===================================
________ TestToolFileSystemReadFile.test_read_file_unicode_decode_error ________

self = <test_tool_filesystem.TestToolFileSystemReadFile object at 0x103116250>
filesystem_tool = <humbug.tools.tool_filesystem.ToolFileSystem object at 0x1035db1d0>
mock_mindspace_manager = <MagicMock id='4349419136'>
mock_authorization = <MagicMock id='4351813216'>

    def test_read_file_unicode_decode_error(self, filesystem_tool, mock_mindspace_manager, mock_authorization):
        """Test reading file with unicode decode error."""
        mock_mindspace_manager.get_absolute_path.return_value = "/test/mindspace/file.txt"
        mock_mindspace_manager.get_mindspace_relative_path.return_value = "file.txt"
    
        with patch('pathlib.Path.resolve') as mock_resolve, \
             patch('pathlib.Path.exists') as mock_exists, \
             patch('pathlib.Path.is_file') as mock_is_file, \
             patch('pathlib.Path.stat') as mock_stat, \
             patch('asyncio.to_thread') as mock_to_thread:
    
            mock_path = Path("/test/mindspace/file.txt")
            mock_resolve.return_value = mock_path
            mock_exists.return_value = True
            mock_is_file.return_value = True
    
            mock_stat_result = MagicMock()
            mock_stat_result.st_size = 100
            mock_stat.return_value = mock_stat_result
    
            # Create an async function that raises the unicode error
            async def mock_unicode_error():
                raise AIToolExecutionError(
                    "Failed to decode file with encoding 'utf-8': invalid",
                    "filesystem",
                    {"path": "/test/file.txt", "encoding": "utf-8"}
                )
    
            mock_to_thread.side_effect = mock_unicode_error
    
            with pytest.raises(AIToolExecutionError) as exc_info:
                asyncio.run(filesystem_tool.execute(
                    {"operation": "read_file", "path": "file.txt"},
                    mock_authorization
                ))
    
            error = exc_info.value
>           assert "Failed to decode file with encoding 'utf-8'" in str(error)
E           assert "Failed to decode file with encoding 'utf-8'" in 'Filesystem operation failed: TestToolFileSystemReadFile.test_read_file_unicode_decode_error.<locals>.mock_unicode_error() takes 0 positional arguments but 3 were given'
E            +  where 'Filesystem operation failed: TestToolFileSystemReadFile.test_read_file_unicode_decode_error.<locals>.mock_unicode_error() takes 0 positional arguments but 3 were given' = str(AIToolExecutionError('Filesystem operation failed: TestToolFileSystemReadFile.test_read_file_unicode_decode_error.<locals>.mock_unicode_error() takes 0 positional arguments but 3 were given'))

tests/tools/test_tool_filesystem.py:442: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    ToolFileSystem:tool_filesystem.py:321 Unexpected error in filesystem operation 'read_file': TestToolFileSystemReadFile.test_read_file_unicode_decode_error.<locals>.mock_unicode_error() takes 0 positional arguments but 3 were given
Traceback (most recent call last):
  File "/Users/dave/github/m6r/humbug/src/humbug/tools/tool_filesystem.py", line 312, in execute
    result = await handlers[operation](arguments, request_authorization)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/dave/github/m6r/humbug/src/humbug/tools/tool_filesystem.py", line 367, in _read_file
    content, actual_size = await asyncio.wait_for(
                           ^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
    )
    ^
  File "/opt/homebrew/Cellar/python@3.13/3.13.5/Frameworks/Python.framework/Versions/3.13/lib/python3.13/asyncio/tasks.py", line 507, in wait_for
    return await fut
           ^^^^^^^^^
  File "/opt/homebrew/Cellar/python@3.13/3.13.5/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py", line 2332, in _execute_mock_call
    result = await effect(*args, **kwargs)
                   ~~~~~~^^^^^^^^^^^^^^^^^
TypeError: TestToolFileSystemReadFile.test_read_file_unicode_decode_error.<locals>.mock_unicode_error() takes 0 positional arguments but 3 were given
__________ TestToolFileSystemReadFile.test_read_file_permission_error __________

self = <test_tool_filesystem.TestToolFileSystemReadFile object at 0x1030e2450>
filesystem_tool = <humbug.tools.tool_filesystem.ToolFileSystem object at 0x10358be30>
mock_mindspace_manager = <MagicMock id='4349421824'>
mock_authorization = <MagicMock id='4349425856'>

    def test_read_file_permission_error(self, filesystem_tool, mock_mindspace_manager, mock_authorization):
        """Test reading file with permission error."""
        mock_mindspace_manager.get_absolute_path.return_value = "/test/mindspace/file.txt"
        mock_mindspace_manager.get_mindspace_relative_path.return_value = "file.txt"
    
        with patch('pathlib.Path.resolve') as mock_resolve, \
             patch('pathlib.Path.exists') as mock_exists, \
             patch('pathlib.Path.is_file') as mock_is_file, \
             patch('pathlib.Path.stat') as mock_stat, \
             patch('asyncio.to_thread') as mock_to_thread:
    
            mock_path = Path("/test/mindspace/file.txt")
            mock_resolve.return_value = mock_path
            mock_exists.return_value = True
            mock_is_file.return_value = True
    
            mock_stat_result = MagicMock()
            mock_stat_result.st_size = 100
            mock_stat.return_value = mock_stat_result
    
            # Create an async function that raises the permission error
            async def mock_permission_error():
                raise AIToolExecutionError(
                    "Permission denied reading file: Access denied",
                    "filesystem",
                    {"path": "/test/file.txt"}
                )
    
            mock_to_thread.side_effect = mock_permission_error
    
            with pytest.raises(AIToolExecutionError) as exc_info:
                asyncio.run(filesystem_tool.execute(
                    {"operation": "read_file", "path": "file.txt"},
                    mock_authorization
                ))
    
            error = exc_info.value
>           assert "Permission denied reading file" in str(error)
E           AssertionError: assert 'Permission denied reading file' in 'Filesystem operation failed: TestToolFileSystemReadFile.test_read_file_permission_error.<locals>.mock_permission_error() takes 0 positional arguments but 3 were given'
E            +  where 'Filesystem operation failed: TestToolFileSystemReadFile.test_read_file_permission_error.<locals>.mock_permission_error() takes 0 positional arguments but 3 were given' = str(AIToolExecutionError('Filesystem operation failed: TestToolFileSystemReadFile.test_read_file_permission_error.<locals>.mock_permission_error() takes 0 positional arguments but 3 were given'))

tests/tools/test_tool_filesystem.py:481: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    ToolFileSystem:tool_filesystem.py:321 Unexpected error in filesystem operation 'read_file': TestToolFileSystemReadFile.test_read_file_permission_error.<locals>.mock_permission_error() takes 0 positional arguments but 3 were given
Traceback (most recent call last):
  File "/Users/dave/github/m6r/humbug/src/humbug/tools/tool_filesystem.py", line 312, in execute
    result = await handlers[operation](arguments, request_authorization)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/dave/github/m6r/humbug/src/humbug/tools/tool_filesystem.py", line 367, in _read_file
    content, actual_size = await asyncio.wait_for(
                           ^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
    )
    ^
  File "/opt/homebrew/Cellar/python@3.13/3.13.5/Frameworks/Python.framework/Versions/3.13/lib/python3.13/asyncio/tasks.py", line 507, in wait_for
    return await fut
           ^^^^^^^^^
  File "/opt/homebrew/Cellar/python@3.13/3.13.5/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py", line 2332, in _execute_mock_call
    result = await effect(*args, **kwargs)
                   ~~~~~~^^^^^^^^^^^^^^^^^
TypeError: TestToolFileSystemReadFile.test_read_file_permission_error.<locals>.mock_permission_error() takes 0 positional arguments but 3 were given
_________ TestToolFileSystemWriteFile.test_write_file_permission_error _________

self = <test_tool_filesystem.TestToolFileSystemWriteFile object at 0x1031063f0>
filesystem_tool = <humbug.tools.tool_filesystem.ToolFileSystem object at 0x1036e17f0>
mock_mindspace_manager = <MagicMock id='4351810864'>
mock_authorization = <MagicMock id='4352542096'>

    def test_write_file_permission_error(self, filesystem_tool, mock_mindspace_manager, mock_authorization):
        """Test writing file with permission error."""
        mock_mindspace_manager.get_absolute_path.return_value = "/test/mindspace/file.txt"
        mock_mindspace_manager.get_mindspace_relative_path.return_value = "file.txt"
    
        with patch('pathlib.Path.resolve') as mock_resolve, \
             patch('pathlib.Path.exists') as mock_exists, \
             patch('asyncio.to_thread') as mock_to_thread:
    
            mock_path = Path("/test/mindspace/file.txt")
            mock_resolve.return_value = mock_path
            mock_exists.return_value = False
    
            # Create an async function that raises the permission error
            async def mock_permission_error():
                raise AIToolExecutionError(
                    "Permission denied writing file: Access denied",
                    "filesystem",
                    {"path": "/test/file.txt"}
                )
    
            mock_to_thread.side_effect = mock_permission_error
    
            with pytest.raises(AIToolExecutionError) as exc_info:
                asyncio.run(filesystem_tool.execute(
                    {"operation": "write_file", "path": "file.txt", "content": "test content"},
                    mock_authorization
                ))
    
            error = exc_info.value
>           assert "Permission denied writing file" in str(error)
E           AssertionError: assert 'Permission denied writing file' in 'Filesystem operation failed: TestToolFileSystemWriteFile.test_write_file_permission_error.<locals>.mock_permission_error() takes 0 positional arguments but 5 were given'
E            +  where 'Filesystem operation failed: TestToolFileSystemWriteFile.test_write_file_permission_error.<locals>.mock_permission_error() takes 0 positional arguments but 5 were given' = str(AIToolExecutionError('Filesystem operation failed: TestToolFileSystemWriteFile.test_write_file_permission_error.<locals>.mock_permission_error() takes 0 positional arguments but 5 were given'))

tests/tools/test_tool_filesystem.py:728: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    ToolFileSystem:tool_filesystem.py:321 Unexpected error in filesystem operation 'write_file': TestToolFileSystemWriteFile.test_write_file_permission_error.<locals>.mock_permission_error() takes 0 positional arguments but 5 were given
Traceback (most recent call last):
  File "/Users/dave/github/m6r/humbug/src/humbug/tools/tool_filesystem.py", line 312, in execute
    result = await handlers[operation](arguments, request_authorization)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/dave/github/m6r/humbug/src/humbug/tools/tool_filesystem.py", line 465, in _write_file
    await asyncio.wait_for(
    ...<2 lines>...
    )
  File "/opt/homebrew/Cellar/python@3.13/3.13.5/Frameworks/Python.framework/Versions/3.13/lib/python3.13/asyncio/tasks.py", line 507, in wait_for
    return await fut
           ^^^^^^^^^
  File "/opt/homebrew/Cellar/python@3.13/3.13.5/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py", line 2332, in _execute_mock_call
    result = await effect(*args, **kwargs)
                   ~~~~~~^^^^^^^^^^^^^^^^^
TypeError: TestToolFileSystemWriteFile.test_write_file_permission_error.<locals>.mock_permission_error() takes 0 positional arguments but 5 were given
_____________ TestToolFileSystemWriteFile.test_write_file_os_error _____________

self = <test_tool_filesystem.TestToolFileSystemWriteFile object at 0x1031064e0>
filesystem_tool = <humbug.tools.tool_filesystem.ToolFileSystem object at 0x1036c48f0>
mock_mindspace_manager = <MagicMock id='4349425520'>
mock_authorization = <MagicMock id='4349426528'>

    def test_write_file_os_error(self, filesystem_tool, mock_mindspace_manager, mock_authorization):
        """Test writing file with OS error."""
        mock_mindspace_manager.get_absolute_path.return_value = "/test/mindspace/file.txt"
        mock_mindspace_manager.get_mindspace_relative_path.return_value = "file.txt"
    
        with patch('pathlib.Path.resolve') as mock_resolve, \
             patch('pathlib.Path.exists') as mock_exists, \
             patch('asyncio.to_thread') as mock_to_thread:
    
            mock_path = Path("/test/mindspace/file.txt")
            mock_resolve.return_value = mock_path
            mock_exists.return_value = False
    
            # Create an async function that raises the OS error
            async def mock_os_error():
                raise AIToolExecutionError(
                    "Failed to write file: Disk full",
                    "filesystem",
                    {"path": "/test/file.txt"}
                )
    
            mock_to_thread.side_effect = mock_os_error
    
            with pytest.raises(AIToolExecutionError) as exc_info:
                asyncio.run(filesystem_tool.execute(
                    {"operation": "write_file", "path": "file.txt", "content": "test content"},
                    mock_authorization
                ))
    
            error = exc_info.value
>           assert "Failed to write file" in str(error)
E           AssertionError: assert 'Failed to write file' in 'Filesystem operation failed: TestToolFileSystemWriteFile.test_write_file_os_error.<locals>.mock_os_error() takes 0 positional arguments but 5 were given'
E            +  where 'Filesystem operation failed: TestToolFileSystemWriteFile.test_write_file_os_error.<locals>.mock_os_error() takes 0 positional arguments but 5 were given' = str(AIToolExecutionError('Filesystem operation failed: TestToolFileSystemWriteFile.test_write_file_os_error.<locals>.mock_os_error() takes 0 positional arguments but 5 were given'))

tests/tools/test_tool_filesystem.py:760: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    ToolFileSystem:tool_filesystem.py:321 Unexpected error in filesystem operation 'write_file': TestToolFileSystemWriteFile.test_write_file_os_error.<locals>.mock_os_error() takes 0 positional arguments but 5 were given
Traceback (most recent call last):
  File "/Users/dave/github/m6r/humbug/src/humbug/tools/tool_filesystem.py", line 312, in execute
    result = await handlers[operation](arguments, request_authorization)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/dave/github/m6r/humbug/src/humbug/tools/tool_filesystem.py", line 465, in _write_file
    await asyncio.wait_for(
    ...<2 lines>...
    )
  File "/opt/homebrew/Cellar/python@3.13/3.13.5/Frameworks/Python.framework/Versions/3.13/lib/python3.13/asyncio/tasks.py", line 507, in wait_for
    return await fut
           ^^^^^^^^^
  File "/opt/homebrew/Cellar/python@3.13/3.13.5/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py", line 2332, in _execute_mock_call
    result = await effect(*args, **kwargs)
                   ~~~~~~^^^^^^^^^^^^^^^^^
TypeError: TestToolFileSystemWriteFile.test_write_file_os_error.<locals>.mock_os_error() takes 0 positional arguments but 5 were given
================================ tests coverage ================================
_______________ coverage: platform darwin, python 3.13.5-final-0 _______________

Coverage HTML written to dir htmlcov
=========================== short test summary info ============================
ERROR tests/tools/test_tool_filesystem.py::TestToolFileSystemWriteFile::test_write_file_permission_error
FAILED tests/tools/test_tool_filesystem.py::TestToolFileSystemReadFile::test_read_file_unicode_decode_error
FAILED tests/tools/test_tool_filesystem.py::TestToolFileSystemReadFile::test_read_file_permission_error
FAILED tests/tools/test_tool_filesystem.py::TestToolFileSystemWriteFile::test_write_file_permission_error
FAILED tests/tools/test_tool_filesystem.py::TestToolFileSystemWriteFile::test_write_file_os_error
4 failed, 401 passed, 1 error in 1.25s
